import { Box } from '@mui/material';
import { useCallback, Fragment } from 'react';
import { useTranslation } from 'next-i18next';
import { Asset } from '~/types/assets.type';
import { useSubtitles } from '~/hooks/useSubtitles';
import { useVideoPlayer } from '~/providers/VideoPlayerProvider';
import { useMediaUploadSubscription } from '~/graphqls/useMediaUploadSubscription';
import { SidebarContent } from '~/components/sidebar-content/sidebar-content.component';
import { TranscriptItem } from '~/components/transcript-item/transcript-item.component';
import { SidebarUploadFile } from '~/components/sidebar-upload-file/sidebar-upload-file.component copy';
import { style } from './sidebar-transcript.style';

interface Props {
  asset: Asset;
  startTime?: number;
  endTime?: number;
}

export function SidebarTranscript(props: Props) {

  const { 
    asset,
    startTime = 0,
    endTime = Number.MAX_SAFE_INTEGER
  } = props;

  const videoPlayer = useVideoPlayer();
  const { t } = useTranslation('details');
  const { status, autogenerated, cues, refresh } = useSubtitles(asset);

  useMediaUploadSubscription(() => {
    refresh();
    videoPlayer.reload();
  });

  const handleClick = useCallback((time: number) => {
    videoPlayer.updateProgress(time);
  }, []);

  function filter(cue: VTTCue) {
    return (
      cue.startTime >= startTime &&
      cue.endTime <= endTime
    );
  }
  
  return (
    <SidebarContent 
      sx={style.sidebarContent}
      id='transcript'>
      <Box sx={style.header}>
        <Box sx={style.title}>Transcript</Box>
        {status.successfull &&
          <Fragment>
            {autogenerated
              ? <Box sx={style.autoTag}>Auto Generated</Box>
              : <Box sx={style.uploadedTag}>Uploaded</Box>
            }
          </Fragment>
        }
      </Box>
      <Box sx={style.content}>
        {status.loading && 'Loading...'}
        {status.error && 'Error' }
        {status.successfull &&
          cues.filter(filter).map(cue =>
            <TranscriptItem
              key={cue.startTime} 
              time={videoPlayer.currentTime}
              cue={cue}
              onClick={handleClick}/>
          )
        }
        <SidebarUploadFile
          show={status.empty}
          assetId={asset.uuid}
          accept='.vtt'
          title={t('sidebarTranscript.uploadFile.title')}
          description={t('sidebarTranscript.uploadFile.description')}
          link={t('sidebarTranscript.uploadFile.link')}
          footer={t('sidebarTranscript.uploadFile.footer')}/>
      </Box>
    </SidebarContent>
  );
}
